{"version":3,"file":"component---src-pages-posts-js-b25538079b7dc11b52fb.js","mappings":"uJAuCA,IA5BY,WAAO,IAAD,EAmBVA,EAAW,WAlBJC,EAAAA,EAAAA,gBAAe,cAkBHC,KAAKC,oBAAb,aAAG,EAAwBH,YAE5C,OACE,uBAAKI,UAAU,OACb,4BAAOJ,M,uDCMb,IApCe,SAAC,GAAiC,IAAhCK,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAExBC,EADQ,MACKH,EAASI,SAiB5B,OAdID,EAEI,sBAAIJ,UAAU,gBACV,gBAAC,EAAAM,KAAD,CAAMC,GAAG,KAAKL,IAKlB,gBAAC,EAAAI,KAAD,CAAMN,UAAU,mBAAmBO,GAAG,KACjCL,GAMT,2BACI,gBAAC,IAAD,MACA,uBAAKF,UAAU,iBAAiB,oBAAmBI,GAE/C,4BAAOD,GACP,oCACO,IAAIK,MAAOC,cADlB,mBAGI,qBAAGC,KAAK,4BAAR,e,kFCsBpB,UA/CkB,SAAC,GAAsB,IAAD,EAApBC,EAAoB,EAApBA,KAAMV,EAAc,EAAdA,SAChBW,GAAY,UAAAD,EAAKb,KAAKC,oBAAV,eAAwBG,QAAxB,QACZW,EAAQF,EAAKG,kBAAkBC,MAErC,OACI,gBAAC,IAAD,CAAQd,SAAUA,EAAUC,MAAOU,GAC/B,gBAAC,IAAD,CAAKV,MAAM,cACX,gBAAC,IAAD,MACA,sBAAIc,MAAO,CAACC,UAAU,SACjBJ,EAAMK,KAAI,SAAAC,GACP,IAAMjB,EAAQiB,EAAKC,YAAYlB,OAASiB,EAAKE,OAAOC,KAEpD,OACI,sBAAIC,IAAKJ,EAAKE,OAAOC,MACjB,2BACItB,UAAU,iBACVwB,WAAS,EACTC,SAAS,6BAET,8BACI,0BACI,gBAAC,EAAAnB,KAAD,CAAMC,GAAIY,EAAKE,OAAOC,KAChBI,SAAS,OACX,wBACIA,SAAS,YAAYxB,KAGjC,yBAAIiB,EAAKC,YAAYO,OAEzB,2BAAS3B,UAAU,aACf,qBAEI4B,wBAAyB,CACrBC,OAAQV,EAAKC,YAAYxB,aAAeuB,EAAKW,SAEjDJ,SAAS","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/pages/posts.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          title\n          description\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const description = data.site.siteMetadata?.description;\n\n  return (\n    <div className=\"bio\">\n      <code>{description}</code>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport {Link} from \"gatsby\"\nimport Nav from \"./nav\";\n\nconst Layout = ({location, title, children}) => {\n    const rootPath = `${__PATH_PREFIX__}/`\n    const isRootPath = location.pathname === rootPath\n    let header\n\n    if (isRootPath) {\n        header = (\n            <h1 className=\"main-heading\">\n                <Link to=\"/\">{title}</Link>\n            </h1>\n        )\n    } else {\n        header = (\n            <Link className=\"header-link-home\" to=\"/\">\n                {title}\n            </Link>\n        )\n    }\n\n    return (\n        <div>\n            <Nav/>\n            <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n                {/*<header className=\"global-header\">{header}</header>*/}\n                <main>{children}</main>\n                <footer>\n                    Â© {new Date().getFullYear()}, Built with\n                    {` `}\n                    <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n                </footer>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Layout\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogIndex = ({data, location}) => {\n    const siteTitle = data.site.siteMetadata?.title || `Title`\n    const posts = data.allMarkdownRemark.nodes\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <SEO title=\"All posts\"/>\n            <Bio/>\n            <ol style={{listStyle: `none`}}>\n                {posts.map(post => {\n                    const title = post.frontmatter.title || post.fields.slug\n\n                    return (\n                        <li key={post.fields.slug}>\n                            <article\n                                className=\"post-list-item\"\n                                itemScope\n                                itemType=\"http://schema.org/Article\"\n                            >\n                                <header>\n                                    <h2>\n                                        <Link to={post.fields.slug}\n                                              itemProp=\"url\">\n                                            <span\n                                                itemProp=\"headline\">{title}</span>\n                                        </Link>\n                                    </h2>\n                                    <p>{post.frontmatter.date}</p>\n                                </header>\n                                <section className=\"invisible\">\n                                    <p\n\n                                        dangerouslySetInnerHTML={{\n                                            __html: post.frontmatter.description || post.excerpt,\n                                        }}\n                                        itemProp=\"description\"\n                                    />\n                                </section>\n                            </article>\n                        </li>\n                    )\n                })}\n            </ol>\n        </Layout>\n    )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["description","useStaticQuery","site","siteMetadata","className","location","title","children","isRootPath","pathname","Link","to","Date","getFullYear","href","data","siteTitle","posts","allMarkdownRemark","nodes","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","excerpt"],"sourceRoot":""}